require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::AnnouncementsController do

  # This should return the minimal set of attributes required to create a valid
  # Admin::Announcement. As you add validations to Admin::Announcement, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:admin_announcement) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Admin::AnnouncementsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all admin_announcements as @admin_announcements" do
      announcement = Admin::Announcement.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:admin_announcements)).to eq([announcement])
    end
  end

  describe "GET show" do
    it "assigns the requested admin_announcement as @admin_announcement" do
      announcement = Admin::Announcement.create! valid_attributes
      get :show, {:id => announcement.to_param}, valid_session
      expect(assigns(:admin_announcement)).to eq(announcement)
    end
  end

  describe "GET new" do
    it "assigns a new admin_announcement as @admin_announcement" do
      get :new, {}, valid_session
      expect(assigns(:admin_announcement)).to be_a_new(Admin::Announcement)
    end
  end

  describe "GET edit" do
    it "assigns the requested admin_announcement as @admin_announcement" do
      announcement = Admin::Announcement.create! valid_attributes
      get :edit, {:id => announcement.to_param}, valid_session
      expect(assigns(:admin_announcement)).to eq(announcement)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Admin::Announcement" do
        expect {
          post :create, {:admin_announcement => valid_attributes}, valid_session
        }.to change(Admin::Announcement, :count).by(1)
      end

      it "assigns a newly created admin_announcement as @admin_announcement" do
        post :create, {:admin_announcement => valid_attributes}, valid_session
        expect(assigns(:admin_announcement)).to be_a(Admin::Announcement)
        expect(assigns(:admin_announcement)).to be_persisted
      end

      it "redirects to the created admin_announcement" do
        post :create, {:admin_announcement => valid_attributes}, valid_session
        expect(response).to redirect_to(admin_announcements_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved admin_announcement as @admin_announcement" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Admin::Announcement).to receive(:save).and_return(false)
        post :create, {:admin_announcement => { "message" => "invalid value" }}, valid_session
        expect(assigns(:admin_announcement)).to be_a_new(Admin::Announcement)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Admin::Announcement).to receive(:save).and_return(false)
        post :create, {:admin_announcement => { "message" => "invalid value" }}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested admin_announcement" do
        announcement = Admin::Announcement.create! valid_attributes
        # Assuming there are no other admin_announcements in the database, this
        # specifies that the Admin::Announcement created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        allow_any_instance_of(Admin::Announcement).to receive(:update).with({ "message" => "MyText" })
        put :update, {:id => announcement.to_param, :admin_announcement => { "message" => "MyText" }}, valid_session
      end

      it "assigns the requested admin_announcement as @admin_announcement" do
        announcement = Admin::Announcement.create! valid_attributes
        put :update, {:id => announcement.to_param, :admin_announcement => valid_attributes}, valid_session
        expect(assigns(:admin_announcement)).to eq(announcement)
      end

      it "redirects to the admin_announcement" do
        announcement = Admin::Announcement.create! valid_attributes
        put :update, {:id => announcement.to_param, :admin_announcement => valid_attributes}, valid_session
        expect(response).to redirect_to(admin_announcements_url)
      end
    end

    describe "with invalid params" do
      it "assigns the admin_announcement as @admin_announcement" do
        announcement = Admin::Announcement.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Admin::Announcement).to receive(:save).and_return(false)
        put :update, {:id => announcement.to_param, :admin_announcement => { "message" => "invalid value" }}, valid_session
        expect(assigns(:admin_announcement)).to eq(announcement)
      end

      it "re-renders the 'edit' template" do
        announcement = Admin::Announcement.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Admin::Announcement).to receive(:save).and_return(false)
        put :update, {:id => announcement.to_param, :admin_announcement => { "message" => "invalid value" }}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested admin_announcement" do
      announcement = Admin::Announcement.create! valid_attributes
      expect {
        delete :destroy, {:id => announcement.to_param}, valid_session
      }.to change(Admin::Announcement, :count).by(-1)
    end

    it "redirects to the admin_announcements list" do
      announcement = Admin::Announcement.create! valid_attributes
      delete :destroy, {:id => announcement.to_param}, valid_session
      expect(response).to redirect_to(admin_announcements_url)
    end
  end

  describe "DELETE dismiss" do
    let(:user) { double('User', username: 'Donald Brower') }
    let(:referrer) { '/' }
    let(:announcement_id) { '1234' }
    it 'creates a dismissal for the current user' do
      allow(controller).to receive(:current_user).and_return(user)
      request.env["HTTP_REFERER"] = referrer
      allow(Admin::Announcement).to receive(:dismiss).with(announcement_id, user).and_return(true)
      delete :dismiss, {:id => announcement_id}
      expect(response).to redirect_to(referrer)
    end
  end

end
