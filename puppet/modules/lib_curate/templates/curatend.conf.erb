tcp_nopush on;
tcp_nodelay off;

upstream app_server {
    server unix:/tmp/curatend.sock.0;
}
server {
    listen 80;
    server_name _;
    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    # Setting default_server on these can cause redirect loops.
    listen 443 ssl;
    listen [::]:443 ssl;

    ssl_certificate <%= @ssl_certificate %>;
    ssl_certificate_key <%= @ssl_certificate_key %>;

    server_name ~^www.(?<domain>.+)$;
    return 301 https://$domain$request_uri;
}
server {
    listen 443 ssl default_server deferred;
    server_name _;
    ssl_certificate      <%= @ssl_certificate %>;
    ssl_certificate_key  <%= @ssl_certificate_key %>;
    ssl_session_cache shared:SSL:1m;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    client_max_body_size 1G;
    server_tokens off;
    root /home/app/curatend/current/public;
    location ^~ /assets/ {
        # compress things on-the-fly
        gzip on;
        # first try to serve a precomputed gzipped version
        gzip_static on;
        expires 1y;
        add_header Cache-Control public;
        add_header ETag "";
        break;
    }

    error_page 503 /503.html;
    error_page 500 502 /500.html;

    try_files $uri @app;

    location @app {
        internal;
        # need to restate all error_page directives since the presence of
        # even one shadows ALL the inherited ones.
        error_page 503   /503.html;
        error_page 500   /500.html;
        error_page 502 = @timeouterror;

        # Maintenance mode if file is present
        # unless request has the header X-Test set to something, e.g. "on"
        if ( -f /home/app/curatend/shared/system/maintenance ) {
            set $maintenance "1";
        }
        if ( $http_x_test ) {
            set $maintenance "";
        }
        if ( $maintenance ) {
            return 503;
        }

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_intercept_errors on;
        proxy_pass http://app_server;
    }

    location @timeouterror {
        # Used to handle errors from large uploads.
        # This is a separate location to prevent a loop should the actual
        # application be down.
        # What happens is large upload takes more than 1 minute, so unicorn
        # kills the process, which triggers an nginx 502 error from a broken
        # connection.

        internal;
        # go to the 502 page
        rewrite ^.*$ /502.html break;
        proxy_method GET;

        # don't bother sending the large file upload along
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_pass http://app_server;
    }

    location ^~ /download-content/ {
        internal;
        proxy_intercept_errors on;
        error_page 401 403 404 500 = @app;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_redirect   off;
        proxy_buffering  off;
        proxy_pass http://127.0.0.1:4000/;
    }
}
